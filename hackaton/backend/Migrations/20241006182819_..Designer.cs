// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Data;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20241006182819_.")]
    partial class _
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("shared.Entities.Award", b =>
                {
                    b.Property<int?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("id"));

                    b.Property<int?>("hackatonId")
                        .HasColumnType("int");

                    b.Property<int?>("position")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("prize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("hackatonId");

                    b.ToTable("Awards");
                });

            modelBuilder.Entity("shared.Entities.Evaluation", b =>
                {
                    b.Property<int?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("id"));

                    b.Property<string>("comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("judgment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("mentorId")
                        .HasColumnType("int");

                    b.Property<int?>("projectId")
                        .HasColumnType("int");

                    b.Property<int?>("score")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("mentorId");

                    b.HasIndex("projectId");

                    b.ToTable("Evaluations");
                });

            modelBuilder.Entity("shared.Entities.ExperienceParticipant", b =>
                {
                    b.Property<int?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("id"));

                    b.Property<string>("area")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("participantId")
                        .HasColumnType("int");

                    b.Property<int?>("time")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("participantId");

                    b.ToTable("ExperiencesParticipant");
                });

            modelBuilder.Entity("shared.Entities.Hackaton", b =>
                {
                    b.Property<int?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("id"));

                    b.Property<DateTime?>("endDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ownerId")
                        .HasColumnType("int");

                    b.Property<int?>("projectId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime?>("startDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("ownerId");

                    b.ToTable("Hackaton");
                });

            modelBuilder.Entity("shared.Entities.Mentor", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("personId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("personId");

                    b.ToTable("Mentors");
                });

            modelBuilder.Entity("shared.Entities.MentorArea", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("area")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("mentorId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("mentorId");

                    b.ToTable("MentorsArea");
                });

            modelBuilder.Entity("shared.Entities.Participant", b =>
                {
                    b.Property<int?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("id"));

                    b.Property<int?>("personId")
                        .HasColumnType("int");

                    b.Property<string>("profession")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("id");

                    b.HasIndex("personId");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("shared.Entities.Person", b =>
                {
                    b.Property<int?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("id"));

                    b.Property<DateTime>("birthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("document")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("typeDocument")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("document")
                        .IsUnique()
                        .HasFilter("[document] IS NOT NULL");

                    b.ToTable("People");
                });

            modelBuilder.Entity("shared.Entities.Project", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("deliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("hackatonId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("teamId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("hackatonId");

                    b.HasIndex("teamId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("shared.Entities.Team", b =>
                {
                    b.Property<int?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("numMembers")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("shared.Entities.TeamMember", b =>
                {
                    b.Property<int?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("id"));

                    b.Property<int?>("participantId")
                        .HasColumnType("int");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("teamId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("participantId");

                    b.HasIndex("teamId");

                    b.ToTable("TeamMembers");
                });

            modelBuilder.Entity("shared.Entities.Award", b =>
                {
                    b.HasOne("shared.Entities.Hackaton", "hackaton")
                        .WithMany("Awards")
                        .HasForeignKey("hackatonId");

                    b.Navigation("hackaton");
                });

            modelBuilder.Entity("shared.Entities.Evaluation", b =>
                {
                    b.HasOne("shared.Entities.Mentor", "mentor")
                        .WithMany("evaluations")
                        .HasForeignKey("mentorId");

                    b.HasOne("shared.Entities.Project", "project")
                        .WithMany("evaluations")
                        .HasForeignKey("projectId");

                    b.Navigation("mentor");

                    b.Navigation("project");
                });

            modelBuilder.Entity("shared.Entities.ExperienceParticipant", b =>
                {
                    b.HasOne("shared.Entities.Participant", "participant")
                        .WithMany("ExperiencesParticipant")
                        .HasForeignKey("participantId");

                    b.Navigation("participant");
                });

            modelBuilder.Entity("shared.Entities.Hackaton", b =>
                {
                    b.HasOne("shared.Entities.Person", "owner")
                        .WithMany()
                        .HasForeignKey("ownerId");

                    b.Navigation("owner");
                });

            modelBuilder.Entity("shared.Entities.Mentor", b =>
                {
                    b.HasOne("shared.Entities.Person", "person")
                        .WithMany("mentor")
                        .HasForeignKey("personId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("person");
                });

            modelBuilder.Entity("shared.Entities.MentorArea", b =>
                {
                    b.HasOne("shared.Entities.Mentor", "mentor")
                        .WithMany("mentorsArea")
                        .HasForeignKey("mentorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("mentor");
                });

            modelBuilder.Entity("shared.Entities.Participant", b =>
                {
                    b.HasOne("shared.Entities.Person", "person")
                        .WithMany("participants")
                        .HasForeignKey("personId");

                    b.Navigation("person");
                });

            modelBuilder.Entity("shared.Entities.Project", b =>
                {
                    b.HasOne("shared.Entities.Hackaton", "hackaton")
                        .WithMany("Projects")
                        .HasForeignKey("hackatonId");

                    b.HasOne("shared.Entities.Team", "team")
                        .WithMany("projects")
                        .HasForeignKey("teamId");

                    b.Navigation("hackaton");

                    b.Navigation("team");
                });

            modelBuilder.Entity("shared.Entities.TeamMember", b =>
                {
                    b.HasOne("shared.Entities.Participant", "participant")
                        .WithMany()
                        .HasForeignKey("participantId");

                    b.HasOne("shared.Entities.Team", "team")
                        .WithMany("teamMembers")
                        .HasForeignKey("teamId");

                    b.Navigation("participant");

                    b.Navigation("team");
                });

            modelBuilder.Entity("shared.Entities.Hackaton", b =>
                {
                    b.Navigation("Awards");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("shared.Entities.Mentor", b =>
                {
                    b.Navigation("evaluations");

                    b.Navigation("mentorsArea");
                });

            modelBuilder.Entity("shared.Entities.Participant", b =>
                {
                    b.Navigation("ExperiencesParticipant");
                });

            modelBuilder.Entity("shared.Entities.Person", b =>
                {
                    b.Navigation("mentor");

                    b.Navigation("participants");
                });

            modelBuilder.Entity("shared.Entities.Project", b =>
                {
                    b.Navigation("evaluations");
                });

            modelBuilder.Entity("shared.Entities.Team", b =>
                {
                    b.Navigation("projects");

                    b.Navigation("teamMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
