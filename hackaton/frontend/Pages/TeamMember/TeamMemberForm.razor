@using shared.Entities
@inject IRepository repository
<EditForm Model="TeamMember" OnSubmit="OnSubmit">
    <DataAnnotationsValidator />

    <div class="mb-3">
        <label>Rol</label>
        <div>
            <InputText @bind-Value="TeamMember.role" class="form-control" required />
            <ValidationMessage For="@(() => TeamMember.role)" />
        </div>
    </div>

    <!-- Campos de relaciones -->
    <div class="mb-3">
        <label>Participante</label>
        <div>
            <InputSelect @bind-Value="TeamMember.participantId" class="form-control" required>
                @if (Participants != null)
                {
                    @foreach (var item in Participants)
                    {
                        <option value="@item.id">@item.person.fullName</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => TeamMember.participantId)" />
        </div>
    </div>

    <div class="mb-3">
        <label>Equipo</label>
        <div>
            <InputSelect @bind-Value="TeamMember.teamId" class="form-control" required>
                @if (Teams != null)
                {
                    @foreach (var item in Teams)
                    {
                        <option value="@item.id">@item.name</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => TeamMember.teamId)" />
        </div>
    </div>

    <button class="btn btn-primary" type="submit">Guardar</button>
    <button class="btn btn-dark" @onclick="() => ReturnAction.InvokeAsync(null)">Regresar</button>
</EditForm>

@code {
    public List<Participant>? Participants { get; set; }
    public List<Team>? Teams { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task Load()
    {
        var responseHppt = await repository.GetAsync<List<Participant>>("/api/participant");
        Participants = responseHppt.Response!;
        if (TeamMember.participantId == null)
        {
            TeamMember.participantId = Participants.First().id;
        }
        var responseHppt2 = await repository.GetAsync<List<Team>>("/api/team");
        Teams = responseHppt2.Response!;
        if (TeamMember.teamId == null)
        {
            TeamMember.teamId = Teams.First().id;
        }
    }
    [EditorRequired]
    [Parameter]
    public TeamMember TeamMember { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback OnSubmit { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }
}