@using shared.Entities
@inject IRepository repository
<EditForm Model="Participant" OnSubmit="OnSubmit">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label>Profesión</label>
        <div>
            <InputText @bind-Value="Participant.profession" class="form-control" required />
            <ValidationMessage For="@(() => Participant.profession)" />
        </div>
    </div>
    
    <!-- Campo de relación con Person -->
    <div class="mb-3">
        <label>Id de Persona</label>
        <div>
            <InputSelect @bind-Value="Participant.personId" class="form-control" required>
                @if (Persons != null)
                {
                    @foreach (var item in Persons)
                    {
                        <option value="@item.id">@item.fullName</option>
                    }
                }
            </InputSelect>
        </div>
    </div>

    <button class="btn btn-primary" type="submit">Guardar</button>
    <button class="btn btn-dark" @onclick="() => ReturnAction.InvokeAsync(null)">Regresar</button>
</EditForm>

@code {
    public List<Person>? Persons { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task Load()
    {
        var responseHppt = await repository.GetAsync<List<Person>>("/api/person");
        Persons = responseHppt.Response!;
        if (Participant.personId == null)
        {
            Participant.personId = Persons.First().id;
        }
    }
    [EditorRequired]
    [Parameter]
    public Participant Participant { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback OnSubmit { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }
}